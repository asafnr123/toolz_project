#!/bin/bash

GREEN="\033[32m"
RESET="\033[0m"

#Main toolz program
function toolz() {
	getUserInput

	#Checking user input
	case "$userInput" in
	-f)
	findHelper ;;
	-s)
	systemInfo ;;
	-p)
	processManage ;;
	-u)
	userManage ;;
	-h)
	echo "func 5" ;;
	*)
	echo "Invalid option.. Exiting" ;;
	esac
}






#getting user input
function getUserInput() {
	printf "%b\n" "-f)${GREEN} Find Helper${RESET}"
	printf "%b\n" "-s)${GREEN} System Information${RESET}"
	printf "%b\n" "-p)${GREEN} Process Management${RESET}"
	printf "%b\n" "-u)${GREEN} User & Groups Management${RESET}"
	printf "%b\n" "-h)${GREEN} Help${RESET}"
	read -p "Choose an option: " userInput
}


#Find helper function
function findHelper() {
	read -p "Path: " userFindPath
	#checks if path exists
	if [[ -e $userFindPath ]]; then
		printf "%b\n" "-n)${GREEN} Name${RESET}"
		printf "%b\n" "-f)${GREEN} File${RESET}"
		printf "%b\n" "-d)${GREEN} Directory${RESET}"
		printf "%b\n" "-s)${GREEN} Size${RESET}"
		read -p "Choose an option: " userFindOpt 

		
		case "$userFindOpt" in
		-n)
		read -p "Name of file/dir: " userOptName
		eval "find $userFindPath -name $userOptName" 
		;;
		-f)
		read -p "Name of file: " userFileName
		eval "find $userFindPath -type f -name $userFileName" 
		;;
		-d)
		read -p "Name of dir: " userDirName
		eval "find $userFindPath -type d -name $userDirName" 
		;;
		-s)
		echo "[Number][+=larger then, -=smaller then, c=bytes, k=KB, M=MB, G=GB] ex: +1000k"
		read -p "Size of file/dir: " userFileSize
		eval "find $userFindPath -size $userFileSize" 
		;;
		*)
		echo "Invalid option.. Exiting" ;;
		esac
		
	#if user's path doesnt exists
	else
		printf "Did not found path %s\n" $userFindPath
	fi

}


#System information function
function systemInfo() {
	printf "%b\n" "-i) ${GREEN} Device Information${RESET}"
	printf "%b\n" "-d) ${GREEN} Disk Information${RESET}"
	printf "%b\n" "-m) ${GREEN} Memory Information${RESET}"
	printf "%b\n" "-p) ${GREEN} Running Processes${RESET}"
	read -p "Choose an option: " userSysOpt
	
	#checking $user input
	case $userSysOpt in
	-i) #Device information 
	#Getting device name
	printf "%b" "Device Name: ${GREEN}$HOSTNAME${RESET}\n" 
	#Getting storage size
	df -h | awk -v GREEN="$GREEN" -v RESET="$RESET" '/\/dev\/sda/ {printf "Storage: %s%s%s\n", GREEN, $2, RESET}'
	#Getting device RAM
        free --mega | awk -v GREEN="$GREEN" -v RESET="$RESET" '/^Mem:/ {printf "RAM: %s%dMB%s\n", GREEN, $2, RESET}'
	#Getting device CPU
	awk -v GREEN="$GREEN" -v RESET="$RESET" -F': ' '/model name/ {printf "CPU: %s%s%s\n", GREEN, $2, RESET; exit}' /proc/cpuinfo
	#Getting OS and architecture
	cat /etc/os-release | awk -F'=' '/PRETTY_NAME/ {print $2}' | awk -v GREEN="$GREEN" -v RESET="$RESET" -F'"' '{printf "OS: %s%s%s", GREEN, $2, RESET}'; printf "%b\n" "${GREEN}$(uname -m)${RESET}" 
	;;
	-d) #Disk information
 	df -h | awk -v GREEN="$GREEN" -v RESET="$RESET" '/\/dev\/sda/ {printf "Size Used Avail\n%s%s %s %s%s", GREEN, $2, $3, $4, RESET}' | column -t 
;;
	-m) #Memory Information
	free --mega | awk -v GREEN="$GREEN" -v RESET="$RESET" '/Mem:/ {printf "Total Used Free\n%s%sM %sM %sM%s", GREEN, $2, $3, $3, RESET}' | column -t 
	;;
	-p) $Running Processes
	top 
	;;
	*)
	echo "Invalid option.. Exiting" ;;
	esac
}


#Process management function
function processManage() {
	printf "%b\n" "-r) ${GREEN}Running Processes${RESET}"
	printf "%b\n" "-s) ${GREEN}Sorted Processes${RESET}"
	printf "%b\n" "-g) ${GREEN}Get Processes${RESET}"
	printf "%b\n" "-k) ${GREEN}Stop Process${RESET}"
	read -p "Choose an option: " userProcessOpt

	case $userProcessOpt in
	-r) #Running processes 
	top
	;;
	-s) #Sory Processes by CPU RAM or Runtime 
	printf "Sort Processes by:\n"
	printf "%b\n" "-c) ${GREEN}CPU${RESET}"
	printf "%b\n" "-m) ${GREEN}RAM${RESET}"
	printf "%b\n" "-r) ${GREEN}Runtime${RESET}"
	read -p "Choose an option: " userSortOpt

	case $userSortOpt in
	-c) #Sorted processes by CPU
	ps aux --sort=+%cpu ;;
	-m) #Sorted Processes by RAM
	ps aux --sort=+%mem ;;
	-r) #Sorted Processes by Runtime
	ps aux --sort=etime ;;
	esac ;;
	-g) #Getting process by id or name
	printf "%b\n" "-i) ${GREEN}PID${RESET}"
	printf "%b\n" "-n) ${GREEN}Process Name${RESET}"
	read -p "Choose an option: " userGetProcOpt

	case $userGetProcOpt in
	-i) #Getting process by id
	read -p "PID: " userPidOpt 
	ps -p $userPidOpt &> /dev/null
	if [[ $? == 0 ]]; then
		ps -p $userPidOpt -o comm=
	else
		printf "Process with %s PID was not found\n" "$userPidOpt"
	fi
	;;
	-n) #Getting process by name
	read -p "Process Name: " userProcNameOpt
	pgrep -x $userProcNameOpt &> /dev/null 
	if [[ $? == 0 ]]; then
		ps aux | grep $userProcNameOpt
	else
		printf "Process %s was not found\n" "$userProcNameOpt"
	fi 
		
	esac ;;
	
	-k) #killing process by name or pid
	printf "%b\n" "-i)${GREEN} PID${RESET}"
	printf "%b\n" "-n)${GREEN} Process Name${RESET}"
	read -p "Choose an option: " userKillProcOpt

	case $userKillProcOpt in

	-i)
	read -p "PID: " userPidOpt
	if kill -0 $userPidOpt &> /dev/null; then
		while true; do
			read -p "Are you sure you went to kill this process? (y/n) " userPidChoice 	
			case $userPidChoice in
			y|Y) #killing process
			kill -9 $userPidOpt
			break ;;
			n|N) 
			echo "Exiting.." 
			break ;;
			esac
		done 
	else
		printf "Process with id %s was not found\n" $userPidOpt	
	fi
	;;	
	-n) #killing process by name
	read -p "Process Name: " userPnameOpt
	pgrep $userPnameOpt &> /dev/null
	if [[ $? == 0 ]]; then
		while true; do
			read -p "Are you sure you want to kill this process? (y/n) " userPnameChoice

		        case $userPnameChoice in
	          	y|Y) #killing process by name
	        	pkill -9 $userPnameOpt
			break ;;
	        	n|N) 
			echo "Exiting.."
			break ;;
			esac
		done

	else
		printf "Process %s was not found\n" $userPnameOpt	
	fi
	;;
	*)
	echo "Invalid option.. Exiting" ;;

	esac 



	esac #first esac




}




# User management function
function userManage() {

	printf "%b\n" "-u) ${GREEN}Users${RESET}"
	printf "%b\n" "-a) ${GREEN}Administrators${RESET}"
	printf "%b\n" "-g) ${GREEN}Groups${RESET}"
	read -p "Choose an option: " userManageOpt

	case "$userManageOpt" in
		-u)
		printf "%b\n" "-c) ${GREEN}Create a user${RESET}"	
		printf "%b\n" "-f) ${GREEN}Find a user${RESET}"	
		printf "%b\n" "-u) ${GREEN}Update password${RESET}"	
		printf "%b\n" "-r) ${GREEN}Remove user${RESET}"	
		
		read -p "Choose an option: " userManagementOpt

		case "$userManagementOpt" in
			-c)
			read -p "Username: " newUsername; 
			# Check if passowrd length is at leat 8 and contains at least 2 letters and numbers
		if [[ $? == 0 ]]; then
			while true; do	
			read -s -p "Password: " newUserPassword; echo	

			if [[ "${#newUserPassword}" -gt 7 ]] && [[ ${newUserPassword} =~ ([a-zA-Z].*){2,} ]] && [[ ${newUserPassword} =~ ([0-9].*){2,} ]]; then

				#check if passwords match
				read -s -p "Re-enter password: " newUserVerifyPassword; echo
				if [[ ${newUserPassword} == ${newUserVerifyPassword} ]]; then

					sudo useradd -m ${newUsername} &> /dev/null
					echo "$newUsername:$newUserPassword" |sudo chpasswd
					if [[ $? == 0 ]]; then	
						printf "%b\n" "${newUsername} was ${GREEN}successfully${RESET} created" 
						break;
					else
						echo "Something went wrong"
						break;
					fi
				else
					echo "Passwords don't match.. Exiting"
					sleep 2
					exit 1
				fi
			else
				printf "\nPassword must be at least 8 characters long and include at least 2 letters
and 2 numbers\n"


			fi

			done
		fi
			;;
			-f)
			read -p "Username: " findUser
			#checks if user put an input
			if [[ -z $findUser ]]; then
				echo "Invalid option.. Exiting"
				sleep 2
				exit 1
			fi
			#checks if user exists	
			if ! id $findUser &> /dev/null; then
				echo "User does not exist"
				sleep 2
				exit 2
			fi
			
			#getting user id
			userId=$(id -u $findUser)

			#getting user groups
			userGroups=$(id -Gn $findUser | sed 's/ / : /g')

			#getting account creation date
			shadowUser=$(sudo grep "^$findUser:" /etc/shadow)	
			if [[ -n $shadowUser ]]; then
				dateInDays=$(echo "$shadowUser" | cut -d: -f3)
	
				if [[ -n $dateInDays ]]; then
					creationDate=$(date -d "1970-01-01 +$dateInDays days" "+%d-%m-%Y")
				else
					creationDate="N/A"	

				fi
			else
				creationDate="N/A"

			fi


			#getting last login time
			userLastLogin=$(last -F $findUser | head -n 1 | awk -v GREEN="$GREEN" -v RESET="$RESET" ' {printf "%s%s-%s-%s-%s-%s%s", GREEN, $4, $5, $6, $7, $8, RESET}')

			#printing all the values
			printf "%b\n" "Username: ${GREEN}${findUser}${RESET}"
			printf "%b\n" "UID: ${GREEN}${userId}${RESET}"
			printf "%b\n" "Groups: ${GREEN}${userGroups}${RESET}"
			printf "%b\n" "Created: ${GREEN}${creationDate}${RESET}"
			printf "%b\n" "Last Login: ${GREEN}${userLastLogin}${RESET}"
			;;		
				
			-u) #update existing user password
			read -p "Username: " userUpdPass
			
			#check if user exist
			if ! id "$userUpdPass" &> /dev/null; then
				echo "User ${userUpdPass} does not exist"
				sleep 2
				exit 1 
			fi
			
			while true; do
				read -s -p "New Password: " userNewPassword; echo
				if [[ ${#userNewPassword} -gt 7 ]] && [[ ${userNewPassword} =~ ([a-zA-Z].*){2,} ]] && [[ ${userNewPassword} =~ ([0-9].*){2,} ]]; then
					read -s -p "Re-enter password: " verifyNewPassword; echo 
					if [[ ${userNewPassword} == ${verifyNewPassword} ]]; then

						echo "${userUpdPass}:${userNewPassword}" | sudo chpasswd  &> /dev/null
						if [[ $? -eq 0 ]]; then

							printf "%b\n" "Password has been ${GREEN}successfully${RESET} changed"
							break;
						
						else
							printf "Something went wrong\n"
							sleep 2
							exit 	
						fi
					else
						echo "Passwords don't match.. Exiting"
						sleep 2
						exit
					fi
				else
				printf "Password must be at least 8 characters long and include at least 2 letters\n"
				fi
			done
			;;
			*)
			echo "Invalid option.. Exiting" ;;

		esac

	esac









}
